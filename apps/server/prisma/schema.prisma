generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  role             String?
  banned           Boolean?  @default(false)
  banReason        String? 
  banExpires       Int?
  isAnonymous      Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  Sessions         Session[]
  Accounts         Account[]
  rooms            UsersOnRooms[]


  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  impersonatedBy String?
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("session")
}

model Account {
  id                   String    @id @default(cuid())
  accountId            String
  providerId           String
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken          String?
  refreshToken         String?
  idToken              String?
  password             String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([accountId, providerId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Jwks {
  id    String @id @default(cuid())
  publicKey String
  privateKey String
  createdAt  DateTime @default(now())

  @@map("jwks")
}

model Room {
  id    String @id @default(cuid())
  name  String
  adminId String @unique
  active  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users   UsersOnRooms[]
}

model UsersOnRooms {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
  Room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId  String @unique


  @@unique([userId, roomId])
  @@id([roomId, userId])
}



